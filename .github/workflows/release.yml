name: Release and Publish

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  release:
    if: github.event.pull_request.merged == true && (contains(github.event.pull_request.labels.*.name, 'patch') || contains(github.event.pull_request.labels.*.name, 'minor')) && !contains(github.event.pull_request.labels.*.name, 'skip-release')
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      packages: write
      pull-requests: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ssh-key: ${{ secrets.DEPLOY_KEY }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint:ci

      - name: Run tests
        run: npm run test:ci:coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Build package
        run: npm run build:ci

      - name: Determine version bump
        id: version_bump
        run: |
          if [[ "${{ contains(github.event.pull_request.labels.*.name, 'minor') }}" == "true" ]]; then
            echo "bump_type=minor" >> $GITHUB_OUTPUT
          elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'patch') }}" == "true" ]]; then
            echo "bump_type=patch" >> $GITHUB_OUTPUT
          else
            echo "bump_type=patch" >> $GITHUB_OUTPUT
          fi

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Bump version
        id: version
        run: |
          OLD_VERSION=$(node -p "require('./package.json').version")
          npm version ${{ steps.version_bump.outputs.bump_type }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Generate Changelog
        run: |
          # Create a tag temporarily for changelog generation
          git tag v${{ steps.version.outputs.new_version }}
          
          # Generate changelog and save release notes (npx will install changelogithub automatically)
          npx changelogithub --output CHANGELOG.md
          npx changelogithub --dry-run > .release-notes.md || echo "## What's Changed\n\nVersion v${{ steps.version.outputs.new_version }}\n\n- Merged PR #${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}" > .release-notes.md
          
          # Remove the temporary tag
          git tag -d v${{ steps.version.outputs.new_version }}

      - name: Configure Git and commit version bump
        env:
          HUSKY: 0
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json CHANGELOG.md
          git commit -m "chore: bump version to v${{ steps.version.outputs.new_version }}"
          git push

      - name: Create and push tag
        run: |
          git tag v${{ steps.version.outputs.new_version }}
          git push origin v${{ steps.version.outputs.new_version }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          release_name: Release v${{ steps.version.outputs.new_version }}
          body_path: .release-notes.md
          draft: false
          prerelease: false

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create build artifacts zip
        run: zip -r build-artifacts.zip ./dist

      - name: Upload build artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build-artifacts.zip
          asset_name: build-artifacts-v${{ steps.version.outputs.new_version }}.zip
          asset_content_type: application/zip

      - name: Notify success
        run: |
          echo "🎉 Successfully published v${{ steps.version.outputs.new_version }} to NPM!"
          echo "📦 Package: https://www.npmjs.com/package/iuseful-react-hooks"
          echo "🏷️ Release: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.new_version }}"
          echo "📁 Build artifacts uploaded to GitHub Release"
